#! /usr/bin/env python3
#
#  ldapuser - Manage LDAP users.
#
#  (C) 2018-2019 Richard Neumann <mail at richard dash neumann period de>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################
"""Manage LDAP users."""

from logging import INFO, basicConfig, getLogger
from sys import argv

from ldaptools.cli import LOG_FORMAT
from ldaptools.cli.ldapuser import get_args
from ldaptools.config import CONFIG
from ldaptools.functions import ldapadd, ldapmodify, ldapdelete, genpw
from ldaptools.user import create, modify, delete
from ldaptools.ldif import DistinguishedName


LOGGER = getLogger(argv[0])


def _add(args):
    """Adds an LDAP user."""

    shell = args.shell or CONFIG['user']['shell']
    home = args.home or CONFIG['user']['home']
    ou = args.ou or CONFIG['user']['ou']
    domain = args.domain or CONFIG['common']['domain']

    if args.passwd:
        passwd = args.passwd
    else:
        passwd = genpw()
        LOGGER.info('Generated password: %s', passwd)

    ldif = create(
        args.user_name, args.first_name, args.last_name, passwd=passwd,
        uid=args.uid, gid=args.gid, home=home, shell=shell, ou=ou,
        domain=domain)
    master = DistinguishedName.for_master(domain)
    ldapadd(master, ldif)


def _modify(args):
    """Modifies an LDAP user."""

    ou = args.ou or CONFIG['user']['ou']
    domain = args.domain or CONFIG['common']['domain']
    ldif = modify(
        args.user_name, first_name=args.first_name, last_name=args.last_name,
        passwd=args.passwd, uid=args.uid, gid=args.gid, home=args.home,
        shell=args.shell, ou=ou, domain=domain)
    master = DistinguishedName.for_master(domain)
    ldapmodify(master, ldif)


def _delete(args):
    """Deletes the respective user."""

    ou = args.ou or CONFIG['user']['ou']
    domain = args.domain or CONFIG['common']['domain']
    dn = delete(args.user_name, ou=ou, domain=domain)
    master = DistinguishedName.for_master(domain)
    ldapdelete(master, dn)


def main():
    """Main function."""

    args = get_args()
    basicConfig(level=INFO, format=LOG_FORMAT)

    if args.action == 'add':
        _add(args)
    elif args.action == 'modify':
        _modify(args)
    elif args.action == 'delete':
        _delete(args)
    else:
        LOGGER.error('No action specified.')


if __name__ == '__main__':
    main()
